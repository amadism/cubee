import type { Money } from './money.js'

/**
 * MoneyCodec is an interface that defines the methods to encode and decode
 * {@link Money} instances into and from a given format. The encoded format can
 * be of any type. The generic type parameters for Currency and Encoded
 * represent the currency code and the encoded format, respectively.
 */
export interface MoneyCodec<
  Currency extends string = string,
  Encoded = string
> {
  /**
   * Encodes a {@link Money} object into an encoded string representation. This
   * method is used within the context of the {@link MoneyCodec} interface to
   * provide a way to serialize a Money object into an Encoded format.
   */
  encode(m: Money<Currency>): Encoded
  /**
   * Decodes an encoded string into a {@link Money} object with the given
   * currency. This method is used within the context of {@link MoneyCodec} to
   * decode an encoded string generated by the {@link encode} method into a
   * {@link Money} object.
   */
  decode(e: Encoded): Money<Currency>
}

/**
 * Encodes a {@link Money} object into a string in the format
 * `${Currency}:${number}` using the default codec.
 */
export function encodeMoney<Currency extends string = string>(
  m: Money<Currency>
) {
  return defaultCodec.encode(m) as `${Currency}:${number}`
}

/**
 * Decodes an encoded money string into a {@link Money} object of the specified
 * currency type. The encoded string must be in the format
 * `${Currency}:${number}`. If the specified currency is not supported, an error
 * will be thrown.
 */
export function decodeMoney<Currency extends string = string>(
  e: string
): Money<Currency> {
  return defaultCodec.decode(e as `${Currency}:${number}`) as Money<Currency>
}

/**
 * Creates a MoneyCodec object with the specified options. The resulting codec
 * can encode and decode {@link Money} objects using the provided encoding and
 * decoding functions, respectively. If a list of supported currencies is
 * provided in the options, the codec will throw an error if an unsupported
 * currency is encountered during decoding.
 */
export function createCodec<
  Currency extends string = string,
  Encoded = string
>(options: {
  currencies?: Currency[]
  encode: (m: Money<Currency>) => Encoded
  decode: (e: Encoded) => Money<Currency>
}): MoneyCodec<Currency, Encoded> {
  return {
    encode: options.encode,
    decode: (encoded) => {
      const money = options.decode(encoded)

      if (
        options.currencies?.length &&
        !options.currencies.includes(money.currency)
      ) {
        throw new Error(
          `currency "${
            money.currency
          }" is not supported, expected one of "${options.currencies.join(
            ', '
          )}"`
        )
      }

      return money
    },
  }
}

const defaultCodec = createCodec({
  currencies: [] as string[],
  encode: (m) => `${m.currency}:${m.amount}` as const,
  decode: (encoded) => {
    const [currency, amount] = encoded.split(':')

    if (!currency) {
      throw new Error(`currency is missing in "${encoded}"`)
    }

    return { currency, amount: Number(amount) }
  },
})
